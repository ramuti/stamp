/* 修正版 1.0 — 名前変更と更新履歴反映のバグ修正済み */

const LS_KEYS = {
  userName: "userName",
  cards: "cards",
  keywords: "keywords",
  updates: "updates",
  userAddedCards: "userAddedCards",
  userStampHistory: "userStampHistory"
};

// localStorage読み書きヘルパー
function loadJSON(key, fallback){ 
  try{ const v=localStorage.getItem(key); return v?JSON.parse(v):fallback;}catch(e){return fallback;}
}
function saveJSON(key,obj){ localStorage.setItem(key,JSON.stringify(obj));}

// データ初期化
let userName = localStorage.getItem(LS_KEYS.userName) || "";
let cards = loadJSON(LS_KEYS.cards, []);
let keywords = loadJSON(LS_KEYS.keywords, []);
let updates = loadJSON(LS_KEYS.updates, []);
let userAddedCards = loadJSON(LS_KEYS.userAddedCards, []);
let userStampHistory = loadJSON(LS_KEYS.userStampHistory, []);

document.addEventListener("DOMContentLoaded",()=>{
  const body=document.body;
  if(body.classList.contains("user")) initUser();
  if(body.classList.contains("admin")) initAdmin();
});

function saveAll(){
  localStorage.setItem(LS_KEYS.userName,userName);
  saveJSON(LS_KEYS.cards,cards);
  saveJSON(LS_KEYS.keywords,keywords);
  saveJSON(LS_KEYS.updates,updates);
  saveJSON(LS_KEYS.userAddedCards,userAddedCards);
  saveJSON(LS_KEYS.userStampHistory,userStampHistory);
}

/* ============================
   ユーザー側ロジック
============================ */
function initUser(){
  const cardTitle=document.getElementById("cardTitle");
  const addCardBtn=document.getElementById("addCardBtn");
  const addCardPass=document.getElementById("addCardPass");
  const userCards=document.getElementById("userCards");
  const historyList=document.getElementById("stampHistory");
  const updateLogs=document.getElementById("updateLogs");
  const setNameBtn=document.getElementById("setNameBtn");
  const userNameInput=document.getElementById("userNameInput");

  if(userName){ cardTitle.textContent=`${userName}のスタンプカード`; userNameInput.value=userName; }

  setNameBtn.addEventListener("click",()=>{
    const v=userNameInput.value.trim();
    if(!v){ alert("名前を入力してください"); return;}
    userName=v;
    localStorage.setItem(LS_KEYS.userName,userName);
    cardTitle.textContent=`${userName}のスタンプカード`;
  });

  addCardBtn.addEventListener("click",()=>{
    const pass=addCardPass.value.trim();
    if(!pass){ alert("追加パスを入力してください"); return;}
    const card=cards.find(c=>c.addPass===pass);
    if(!card){ alert("パスが違います"); return;}
    if(!userAddedCards.includes(card.id)){ 
      userAddedCards.push(card.id); 
      saveJSON(LS_KEYS.userAddedCards,userAddedCards); 
      renderUserCards(); 
      addCardPass.value=""; 
    } else alert("すでに追加済みです");
  });

  function renderUserCard(card){
    const container=document.createElement("div");
    container.className="card";
    container.dataset.id=card.id;

    const title=document.createElement("h3"); 
    title.textContent=card.name; 
    container.appendChild(title);

    const grid=document.createElement("div"); 
    grid.style.marginBottom="8px";
    for(let i=0;i<card.slots;i++){
      const slot=document.createElement("div");
      slot.className="stamp-slot";
      if(userStampHistory.some(s=>s.cardId===card.id && s.slot===i)) slot.classList.add("stamp-filled");
      grid.appendChild(slot);
    }
    container.appendChild(grid);

    const serial=document.createElement("div"); 
    serial.className="serial"; 
    serial.textContent=genSerialForUser(); 
    container.appendChild(serial);

    const btn=document.createElement("button"); 
    btn.textContent="スタンプを押す"; 
    btn.style.marginTop="8px";
    btn.addEventListener("click",()=>{
      const kw=prompt("スタンプ合言葉を入力してください");
      if(kw===null) return;
      const word=kw.trim();
      if(!word){ alert("合言葉を入力してください"); return;}
      const keywordObj=keywords.find(k=>String(k.cardId)===String(card.id) && k.word===word && k.active);
      if(!keywordObj){ alert("合言葉が違うか無効です"); return;}
      if(userStampHistory.some(s=>s.cardId===card.id && s.keyword===word)){ alert("もう押してあります"); return;}
      let nextSlot=0; while(userStampHistory.some(s=>s.cardId===card.id && s.slot===nextSlot)) nextSlot++;
      if(nextSlot>=card.slots){ alert(card.maxNotifyMsg||"スタンプがMAXです"); return;}
      userStampHistory.push({cardId:card.id, slot:nextSlot, keyword:word, date:new Date().toLocaleString()});
      saveJSON(LS_KEYS.userStampHistory,userStampHistory);
      renderUserCards(); updateHistory(); alert(card.notifyMsg||"スタンプを押しました！");
    });
    container.appendChild(btn);

    const delBtn=document.createElement("button"); 
    delBtn.textContent="カードを削除"; 
    delBtn.style.background="#999"; 
    delBtn.style.marginLeft="8px";
    delBtn.addEventListener("click",()=>{
      if(!confirm("このカードを自分の端末から削除しますか？（履歴も消えます）")) return;
      userAddedCards=userAddedCards.filter(id=>id!==card.id);
      userStampHistory=userStampHistory.filter(h=>h.cardId!==card.id);
      saveAll();
      renderUserCards(); updateHistory();
    });
    container.appendChild(delBtn);

    return container;
  }

  function renderUserCards(){
    userCards.innerHTML="";
    userAddedCards.forEach(id=>{
      const card=cards.find(c=>c.id===id);
      if(card) userCards.appendChild(renderUserCard(card));
    });
  }

  function updateHistory(){
    historyList.innerHTML="";
    userStampHistory.slice().reverse().forEach(h=>{
      const card=cards.find(c=>c.id===h.cardId);
      if(!card) return;
      const li=document.createElement("li");
      li.textContent=`${card.name} — ${h.date}`;
      historyList.appendChild(li);
    });
    updateLogs.innerHTML="";
    updates.slice().reverse().forEach(u=>{
      const div=document.createElement("div"); 
      div.textContent=u; 
      updateLogs.appendChild(div);
    });
  }

  function genSerialForUser(){ return (userStampHistory.length+1).toString().padStart(5,"0"); }

  renderUserCards();
  updateHistory();
}

/* ============================
   管理者側ロジック
============================ */
function initAdmin(){
  const cardName=document.getElementById("cardName");
  const cardSlots=document.getElementById("cardSlots");
  const notifyMsg=document.getElementById("notifyMsg");
  const maxNotifyMsg=document.getElementById("maxNotifyMsg");
  const addPass=document.getElementById("addPass");
  const cardBG=document.getElementById("cardBG");
  const stampIcon=document.getElementById("stampIcon");
  const createCardBtn=document.getElementById("createCardBtn");
  const previewArea=document.getElementById("previewArea");
  const adminCards=document.getElementById("adminCards");
  const keywordCardSelect=document.getElementById("keywordCardSelect");
  const keywordInput=document.getElementById("keywordInput");
  const addKeywordBtn=document.getElementById("addKeywordBtn");
  const keywordList=document.getElementById("keywordList");
  const updateInput=document.getElementById("updateInput");
  const addUpdateBtn=document.getElementById("addUpdateBtn");
  const adminUpdateLogs=document.getElementById("adminUpdateLogs");
  const previewClearBtn=document.getElementById("previewClearBtn");

  function refreshCardListUI(){
    adminCards.innerHTML="";
    cards.forEach(c=>{
      const li=document.createElement("li");
      const left=document.createElement("div"); left.style.flex="1"; left.innerText=`${c.name} | パス:${c.addPass} | 枠:${c.slots}`;
      const del=document.createElement("button"); del.textContent="削除"; del.style.background="#999";
      del.addEventListener("click",()=>{
        if(!confirm("削除しますか？")) return;
        cards=cards.filter(cd=>cd.id!==c.id);
        userAddedCards=userAddedCards.filter(id=>id!==c.id);
        userStampHistory=userStampHistory.filter(h=>h.cardId!==c.id);
        keywords=keywords.filter(k=>k.cardId!==c.id);
        saveAll();
        refreshCardListUI(); refreshKeywordSelect();
      });
      li.appendChild(left); li.appendChild(del);
      adminCards.appendChild(li);
    });
  }

  function refreshKeywordSelect(){
    keywordCardSelect.innerHTML="";
    cards.forEach(c=>{ const opt=document.createElement("option"); opt.value=c.id; opt.textContent=c.name; keywordCardSelect.appendChild(opt); });
    refreshKeywordList();
  }

  function refreshKeywordList(){
    keywordList.innerHTML="";
    keywords.forEach(k=>{
      const li=document.createElement("li");
      li.textContent=`カード:${k.cardId} | ${k.word} | active:${k.active}`;
      const del=document.createElement("button"); del.textContent="削除"; del.style.background="#999";
      del.addEventListener("click",()=>{
        if(!confirm("削除しますか？")) return;
        keywords=keywords.filter(kw=>kw!==k); saveJSON(LS_KEYS.keywords,keywords); refreshKeywordList();
      });
      li.appendChild(del); keywordList.appendChild(li);
    });
  }

  createCardBtn.addEventListener("click",()=>{
    if(!cardName.value.trim()||!addPass.value.trim()){ alert("カード名・追加パスは必須"); return; }
    const newCard={ 
      id:Date.now(), 
      name:cardName.value.trim(),
      slots:Number(cardSlots.value)||5,
      notifyMsg:notifyMsg.value.trim(),
      maxNotifyMsg:maxNotifyMsg.value.trim(),
      addPass:addPass.value.trim(),
      bg:cardBG.value.trim(),
      stamp:stampIcon.value.trim()
    };
    cards.push(newCard); saveJSON(LS_KEYS.cards,cards);
    refreshCardListUI(); refreshKeywordSelect(); previewArea.innerHTML=""; alert("カード作成完了");
  });

  addKeywordBtn.addEventListener("click",()=>{
    const cId=keywordCardSelect.value; const w=keywordInput.value.trim();
    if(!cId||!w){ alert("カードと合言葉を選択してください"); return; }
    keywords.push({cardId:cId, word:w, active:true}); saveJSON(LS_KEYS.keywords,keywords); refreshKeywordList(); keywordInput.value="";
  });

  addUpdateBtn.addEventListener("click",()=>{
    const val=updateInput.value.trim(); if(!val) return;
    updates.push(val); saveJSON(LS_KEYS.updates,updates); updateInput.value=""; renderUpdates();
  });

  function renderUpdates(){
    adminUpdateLogs.innerHTML="";
    updates.slice().reverse().forEach(u=>{
      const div=document.createElement("div"); div.textContent=u;
      adminUpdateLogs.appendChild(div);
    });
  }

  previewClearBtn.addEventListener("click",()=>{ previewArea.innerHTML=""; });

  refreshCardListUI(); refreshKeywordSelect(); renderUpdates();
}